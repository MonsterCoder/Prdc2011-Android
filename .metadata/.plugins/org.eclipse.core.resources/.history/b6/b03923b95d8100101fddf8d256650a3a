SpeakerStore = new Ext.data.Store({
    model: 'Speaker',
    
    getGroupString: function(r){
        return r.get('last_name')[0]
    }
});

prdc.App = Ext.extend(Ext.TabPanel, {
    tabBar: {
                dock: 'bottom',
                layout: {
                    pack: 'center'
                }
            },
    fullscreen: true,
	ui: 'light',
    cardSwitchAnimation: false,

	initComponent: function() {
	       var sessions, speakers, tweets, locations, about;
	        
           tracks = new Ext.Component({
               
                title: 'Tracks',
                scroll: 'vertical',
                iconCls: 'time',
				xtype: 'trackList'
            });
            
            speakers = new Ext.Component({
                title: 'Speakers',   
                scroll: 'vertical',
                iconCls: 'user',
                xtype: 'speakerlist'
            });
            
            tweets = new Ext.Component({
                title: 'Tweets',
                 iconCls: 'team'
            });
            
            locations = new Ext.Component({
            	iconCls: 'locate',
                title: 'Location'
            });
            
            about = new Ext.Component({
                iconCls: 'info',
                title: 'About'
            });
            
            if (navigator.onLine) {
	            this.items = [tracks, speakers, tweets, locations, about];
	            
	            refresh = function() {
	                Ext.Ajax.defaultHeaders = {'Accept': 'application/json' } ; 
	                
	                 function makerequest(link, target) {            
	                  Ext.Ajax.request({
	                    url: link,
	                    method: "GET",
	                    params: {},
	                    success: function(res, request) {                
	                               if (res) {
	                                        
	                                        result = Ext.util.JSON.decode(res.responseText);   
	                                        target.update(result);             
	                                    }
	                                    else {
	                                        alert('There was an error retrieving the data.');
	                                    }
	                                },
	                   failure: function(res, request){
	                                 alert('Failed: ', res);
	                                }
	                            });
	                        }
	                        
	                makerequest('http://prairiedevcon.com/tracks', tracks);
	                makerequest('http://prairiedevcon.com/Speakers', speakers);
	            }
        
        		refresh();    
        } else {
            this.on('render', function(){
                this.el.mask('No internet connection.');
            }, this);
        }
        
	   	prdc.cfg = {};
		prdc.cfg.shortUrl = this.shortUrl;
		prdc.cfg.title = this.title;
		
		prdc.App.superclass.initComponent.call(this);
	},
    

});
